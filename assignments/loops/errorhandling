try:
    # this function can raise an Exception.
    some_function()
    print("Success!)
except Exception as e:
    '''
    if Exception is raised, the print block above will not happen
    and the print statement below will.
    '''
    print("Failed!", e)

    from email_store import *

# Local instance of the email store.
EMAIL_STORE = EmailStore()


def view_emails():
    '''
    This function prints out each email in the store.
    '''
    count = 1
    print("\nEmails:")
    for email in EMAIL_STORE.emails:
        print(f"{count}) {email}")


def add_emails():
    '''
    This function uses a sentinal loop add email addresses to store.
    '''
    print("\nAdding emails...\n")
    user_input = input(
        "Enter first/last name separated by space ('Q to exit): ")
    while True:
        # check if user wants to exit.
        if user_input.lower() == "q":
            break
        # get first and last name from user input.
        user_input = user_input.lower().split(" ")
        first_name = user_input[0]
        last_name = user_input[1]

        # add the email to the store.
        email = EMAIL_STORE.add(first_name, last_name)
        print(f"Successfully added email to store '{email}'!")
        user_input = input(
            "Enter first/last name separated by space ('Q' to exit): ")


def remove_emails():
    '''
    This function uses a sentinal loop remove emails from the store.
    '''
    user_input = input("Enter user email to delete ('Q' to quit): ")
    while True:
        if user_input.lower() == "q":
            break
        # TODO use a try/except block to catch the exception thrown by the remove method.
        EMAIL_STORE.remove(user_input.lower())
        print(
            f"Successfully deleted the email '{user_input.lower()}' from store!")
        user_input = input("Enter user email to delete ('Q' to quit): ")


def main():

    # create instance of the email store.

    print("This program manages a local store for student emails.")
    print("\nMenu:")
    print("1) View")
    print("2) Add")
    print("3) Remove")
    print("Q) Quit")
    option = input("Enter operation: ").lower()
    while True:
        if option == "1":
            view_emails()
        elif option == "2":
            add_emails()
        elif option == "3":
            remove_emails()
        else:
            print("Exiting!")
            break
        print("This program manages a local store for student emails.")
        print("\nMenu:")
        print("1) View")
        print("2) Add")
        print("3) Remove")
        print("Q) Quit")
        option = input("Enter operation: ").lower()


main()

from genericpath import exists


class EmailStore:

    def __init__(self):
        '''
        Constructor method.
        '''
        self.emails = []

    def exists(self, email):
        '''
        Method that checks if an email exists in store.
        '''
        return email in self.emails

    def add(self, first_name, last_name):
        '''
        Method that adds a new email to the store.
        The email address is of the format {first_name}.{last_name}{count}@marist.edu

        @return the email that was added.
        '''
        email = None
        # TODO if either first_name or last_name is None raise an exception
        # TODO use a while loop to construct email from first_name and last_name and check if it exists.
        # TODO if generated email exists, increment count.
        # TODO if generated email doesn't exist, add it to the collection of emails (self.emails).
        self.emails.append(email)
        return email

    def remove(self, email):
        '''
        Method that removes an email from the store.
        '''
        # TODO if email doesn't exist, raise an exception.
        self.emails.remove(email)

        from email_store import *


class TestClass:

    def test_add_email(self):
        email_store = EmailStore()
        email = email_store.add("Kevin", "Hayden")
        assert email in email_store.emails

    def test_none_first_name(self):
        email_store = EmailStore()
        try:
            email_store.add(None, "Hayden")
        except Exception:
            assert True
            return
        assert False

    def test_none_last_name(self):
        email_store = EmailStore()
        try:
            email_store.add("Kevin", None)
        except Exception:
            assert True
            return
        assert False

    def test_add_duplicate(self):
        email_store = EmailStore()
        email_store.add("Kevin", "Hayden")
        email = email_store.add("Kevin", "Hayden")
        print(email)
        assert email in email_store.emails

    def test_remove_not_exist(self):
        email_store = EmailStore()
        try:
            email_store.remove("abcd@marist.edu")
        except Exception:
            assert True
            return
        assert False